# Follow https://google.github.io/styleguide/shellguide.html

snippet t
	#!/usr/bin/env bash
	# description of the script
	set -eu
	set -o pipefail
	var=${1:Error var is not provided}
	usage()
	{
		echo "Usage:"
		echo
		echo "Examples:"
	}
	if [ "$#" -ne ${0:2} ]; then
		echo "ERROR: invalid usage, need ${0:2} args"
		usage
		exit 1
	fi
	err() {
		echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
	}

snippet sb
	#!/bin/bash

snippet cfm
	read -p "Confirm [y/N]? " -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "Note: You didn't confirm"
		exit 0
	fi

snippet func
	#######################################
	# What does it do
	# Globals:
	#   SOMEDIR List of global variables used and modified.
	# Arguments:
	#   None Arguments taken
	# Outputs:
	#   Writes location to stdout or stderr
	# Returns:
	#   0 if xxx; non zero on error
	#######################################
	you_function() {
	}

snippet iff
	if [[ test -f ${f1} -a test -f ${f2} ]]


# string comparision
# equal,  empty, not-empty
snippet ifs
	if [[ ${s} == "test" ]]; then
	if [[ -z ${s} ]]; then
	if [[ -n ${s} ]]; then

# numerical comparision
snippet ifn
	if (( var > 2 )); then
	fi

snippet  add
	$(( i = 4 * j + 5))

# do something if command succeed, judging by cmd exit status
snippet ifcmd
	if ${cmd}; then
		echo "succeed"
	else
		echo "failed"
	fi

# check command output
snippet ifcmdo
	if [[ $(cmd) ]]; then
		echo "has output"
	else
		echo "no output"
	fi

snippet ckcmd
	cmd
	if (( $? != 0 )) then;
		echo "cmd failed"
		exit 1
	fi

snippet ifcmdg
	if cmd | grep "target"; then
		echo "find target in outout, good or bad?"
	fi

snippet ntimes
	for i in $(seq 1 ${0:10}); do
		echo -n "try ${i}: "
		if ${1:dosomething}; then
			echo "Success!"
			exit 0
		fi
		echo "Failed!"
		sleep 10
	done

snippet curl
	curl \
	-vvv \
	--fail \
	--cert ${0:cert}  \
	--key ${0:key}\
	-u "user:passwd" \
	-H 'Content-Type: application/json' \
	-d "${}" \
	-X "action" \
	"http://url"

snippet jqe
	$(jq -r '.a.b' path/to.json)

snippet elif
	elif [[ ${1:condition} ]]; then
		${0:${VISUAL}}
snippet for
	for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
		${0:${VISUAL}}
	done
snippet fori
	for ${1:thing} in ${2:things} ; do
		something_with "${things}"
	done
snippet forarray
	for i in ${a[@]}; do
		do_something ${f}
	done

snippet da
	declare -a flags
	flags=(--foo --bar='baz')
	flags+=(--greeting="Hello ${name}")
	mybinary "${flags[@]}"


snippet forline
	cat_a_file or echo $var | while read line;
		do_something to "${line}"
	done
snippet wh
	while [[ ${1:condition} ]]; do
		${0:${VISUAL}}
	done
snippet until
	until [[ ${1:condition} ]]; do
		${0:${VISUAL}}
	done

snippet case
	case ${1:word} in
		${2:pattern})
			${0}
			;;
	esac
snippet go
	while getopts '${1:o}' ${2:opts}
	do
		case $$2 in
		${3:o0})
			${0:#staments};;
		esac
	done
# Set SCRIPT_DIR variable to directory script is located.
snippet sdir
	SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# getopt
snippet getopt
	__ScriptVersion="${1:version}"

	#===  FUNCTION  ================================================================
	#         NAME:  usage
	#  DESCRIPTION:  Display usage information.
	#===============================================================================
	function usage ()
	{
		echo "Usage :  $${0:0} [options] [--]

	    Options:
	    -h|help       Display this message
	    -v|version    Display script version"

	}    # ----------  end of function usage  ----------

	#-----------------------------------------------------------------------
	#  Handle command line arguments
	#-----------------------------------------------------------------------

	while getopts ":hv" opt
	do
	  case $opt in

		h|help     )  usage; exit 0   ;;

		v|version  )  echo "$${0:0} -- Version $__ScriptVersion"; exit 0   ;;

		* )  echo -e "\n  Option does not exist : $OPTARG\n"
			  usage; exit 1   ;;

	  esac    # --- end of case ---
	done
	shift $(($OPTIND-1))
snippet root
	if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi

snippet fun-sh
	${1:function_name}() {
		${0:#function_body}
	}

snippet fun
	function ${1:function_name}() {
		${0:#function_body}
	}
